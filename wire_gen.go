// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dadaxiaoxiao/go-pkg/customserver"
	"github.com/dadaxiaoxiao/search/internal/events"
	"github.com/dadaxiaoxiao/search/internal/grpc"
	"github.com/dadaxiaoxiao/search/internal/repository"
	"github.com/dadaxiaoxiao/search/internal/repository/dao"
	"github.com/dadaxiaoxiao/search/internal/service"
	"github.com/dadaxiaoxiao/search/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() *customserver.App {
	client := ioc.InitEtcdClient()
	elasticClient := ioc.InitESClient()
	anyDAO := dao.NewAnyElasticDAO(elasticClient)
	anyRepository := repository.NewAnyRepository(anyDAO)
	userDAO := dao.NewUserElasticDAO(elasticClient)
	userRepository := repository.NewUserRepository(userDAO)
	articleDAO := dao.NewArticleElasticDAO(elasticClient)
	tagDAO := dao.NewTagESDAO(elasticClient)
	articleRepository := repository.NewArticleRepository(articleDAO, tagDAO)
	syncService := service.NewSyncService(anyRepository, userRepository, articleRepository)
	syncServiceServer := grpc.NewSyncServiceServer(syncService)
	searchService := service.NewSearchService(userRepository, articleRepository)
	searchServiceServer := grpc.NewSearchServiceServer(searchService)
	cmdable := ioc.InitRedis()
	logger := ioc.InitLogger()
	server := ioc.InitGRPCServer(client, syncServiceServer, searchServiceServer, cmdable, logger)
	saramaClient := ioc.InitKafka()
	syncDataEventConsumer := events.NewSyncAnyDataEventConsumer(saramaClient, syncService, logger)
	syncUserConsumer := events.NewSyncUserConsumer(saramaClient, syncService, logger)
	syncArticleConsumer := events.NewSyncArticleConsumer(saramaClient, syncService, logger)
	v := ioc.NewConsumers(syncDataEventConsumer, syncUserConsumer, syncArticleConsumer)
	app := &customserver.App{
		GRPCServer: server,
		Consumers:  v,
	}
	return app
}

// wire.go:

var thirdProvider = wire.NewSet(ioc.InitEtcdClient, ioc.InitRedis, ioc.InitLogger, ioc.InitOTEL, ioc.InitESClient, ioc.InitKafka, ioc.NewConsumers)

var serviceProvider = wire.NewSet(dao.NewTagESDAO, dao.NewAnyElasticDAO, dao.NewUserElasticDAO, dao.NewArticleElasticDAO, repository.NewAnyRepository, repository.NewUserRepository, repository.NewArticleRepository, service.NewSyncService, service.NewSearchService)

var consumerProvider = wire.NewSet(events.NewSyncAnyDataEventConsumer, events.NewSyncUserConsumer, events.NewSyncArticleConsumer)
